"""Create initial tables

Revision ID: 4927cedb7907
Revises: 
Create Date: 2025-11-01 20:12:41.028542

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4927cedb7907'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('exercises',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('muscle_group_primary', sa.String(), nullable=False),
    sa.Column('muscle_groups_secondary', sa.JSON(), nullable=True),
    sa.Column('equipment_required', sa.JSON(), nullable=True),
    sa.Column('difficulty_level', sa.Integer(), nullable=True),
    sa.Column('is_baseball_specific', sa.Boolean(), nullable=True),
    sa.Column('form_cues', sa.JSON(), nullable=True),
    sa.Column('video_url', sa.String(), nullable=True),
    sa.Column('default_sets', sa.Integer(), nullable=True),
    sa.Column('default_reps', sa.Integer(), nullable=True),
    sa.Column('default_duration_seconds', sa.Integer(), nullable=True),
    sa.Column('default_weight_lbs', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exercises_id'), 'exercises', ['id'], unique=False)
    op.create_table('foods',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('active_compounds', sa.JSON(), nullable=True),
    sa.Column('net_carbs_per_100g', sa.Float(), nullable=True),
    sa.Column('protein_per_100g', sa.Float(), nullable=True),
    sa.Column('fat_per_100g', sa.Float(), nullable=True),
    sa.Column('fiber_per_100g', sa.Float(), nullable=True),
    sa.Column('cancer_types', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('mechanisms', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('evidence_level', sa.String(), nullable=True),
    sa.Column('min_daily_amount_grams', sa.Float(), nullable=True),
    sa.Column('max_daily_amount_grams', sa.Float(), nullable=True),
    sa.Column('recommended_amount_grams', sa.Float(), nullable=True),
    sa.Column('contraindications', sa.Text(), nullable=True),
    sa.Column('food_drug_interactions', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_foods_id'), 'foods', ['id'], unique=False)
    op.create_table('muscle_groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('recovery_time_hours', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_muscle_groups_id'), 'muscle_groups', ['id'], unique=False)
    op.create_table('research_studies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pubmed_id', sa.String(), nullable=True),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('authors', sa.Text(), nullable=True),
    sa.Column('journal', sa.String(), nullable=True),
    sa.Column('year', sa.Integer(), nullable=True),
    sa.Column('study_type', sa.String(), nullable=True),
    sa.Column('relevance_tags', sa.JSON(), nullable=True),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('results', sa.Text(), nullable=True),
    sa.Column('efficacy_percentage', sa.Integer(), nullable=True),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('doi', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_research_studies_id'), 'research_studies', ['id'], unique=False)
    op.create_index(op.f('ix_research_studies_pubmed_id'), 'research_studies', ['pubmed_id'], unique=True)
    op.create_table('compliance_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('nutrition_foods_consumed', sa.String(), nullable=True),
    sa.Column('nutrition_adherence_percentage', sa.Float(), nullable=True),
    sa.Column('workout_completed', sa.Boolean(), nullable=True),
    sa.Column('workout_duration_minutes', sa.Integer(), nullable=True),
    sa.Column('combined_adherence_score', sa.Float(), nullable=True),
    sa.Column('is_perfect_day', sa.Boolean(), nullable=True),
    sa.Column('current_streak_days', sa.Integer(), nullable=True),
    sa.Column('glutamine_competition_score', sa.Float(), nullable=True),
    sa.Column('recorded_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_compliance_records_date'), 'compliance_records', ['date'], unique=False)
    op.create_index(op.f('ix_compliance_records_id'), 'compliance_records', ['id'], unique=False)
    op.create_table('daily_protocols',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('weight_lbs', sa.Float(), nullable=True),
    sa.Column('foods', sa.JSON(), nullable=True),
    sa.Column('total_net_carbs', sa.Float(), nullable=True),
    sa.Column('total_protein', sa.Float(), nullable=True),
    sa.Column('total_fat', sa.Float(), nullable=True),
    sa.Column('total_calories', sa.Float(), nullable=True),
    sa.Column('protein_target', sa.Float(), nullable=True),
    sa.Column('protein_reasoning', sa.Text(), nullable=True),
    sa.Column('keto_compatible', sa.Boolean(), nullable=True),
    sa.Column('keto_score', sa.Float(), nullable=True),
    sa.Column('estimated_glutamine_competition_score', sa.Float(), nullable=True),
    sa.Column('generated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_daily_protocols_date'), 'daily_protocols', ['date'], unique=False)
    op.create_index(op.f('ix_daily_protocols_id'), 'daily_protocols', ['id'], unique=False)
    op.create_table('weight_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('weight_lbs', sa.Float(), nullable=False),
    sa.Column('energy_level', sa.Integer(), nullable=True),
    sa.Column('sleep_quality', sa.Integer(), nullable=True),
    sa.Column('digestion_quality', sa.Integer(), nullable=True),
    sa.Column('overall_feeling', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('followed_protocol', sa.Boolean(), nullable=True),
    sa.Column('recorded_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_weight_records_date'), 'weight_records', ['date'], unique=False)
    op.create_index(op.f('ix_weight_records_id'), 'weight_records', ['id'], unique=False)
    op.create_table('workout_plans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('workout_type', sa.String(), nullable=True),
    sa.Column('target_muscle_groups', sa.JSON(), nullable=True),
    sa.Column('exercises', sa.JSON(), nullable=True),
    sa.Column('estimated_duration_minutes', sa.Integer(), nullable=True),
    sa.Column('coaching_message', sa.Text(), nullable=True),
    sa.Column('weekly_focus', sa.Text(), nullable=True),
    sa.Column('soreness_maintenance_goals', sa.JSON(), nullable=True),
    sa.Column('generated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workout_plans_date'), 'workout_plans', ['date'], unique=False)
    op.create_index(op.f('ix_workout_plans_id'), 'workout_plans', ['id'], unique=False)
    op.create_table('workout_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('workout_plan_id', sa.Integer(), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed', sa.Boolean(), nullable=True),
    sa.Column('actual_duration_minutes', sa.Integer(), nullable=True),
    sa.Column('exercises_completed', sa.JSON(), nullable=True),
    sa.Column('perceived_exertion', sa.Integer(), nullable=True),
    sa.Column('post_workout_soreness_prediction', sa.JSON(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('logged_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workout_plan_id'], ['workout_plans.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workout_logs_date'), 'workout_logs', ['date'], unique=False)
    op.create_index(op.f('ix_workout_logs_id'), 'workout_logs', ['id'], unique=False)
    op.create_table('soreness_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('muscle_group', sa.String(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('soreness_intensity', sa.Integer(), nullable=False),
    sa.Column('onset_date', sa.Date(), nullable=True),
    sa.Column('expected_recovery_date', sa.Date(), nullable=True),
    sa.Column('source_workout_id', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('logged_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['source_workout_id'], ['workout_logs.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_soreness_records_date'), 'soreness_records', ['date'], unique=False)
    op.create_index(op.f('ix_soreness_records_id'), 'soreness_records', ['id'], unique=False)
    op.create_index(op.f('ix_soreness_records_muscle_group'), 'soreness_records', ['muscle_group'], unique=False)
    op.drop_index('idx_notebooks_created_at', table_name='notebooks')
    op.drop_index('idx_notebooks_user_id', table_name='notebooks')
    op.drop_table('notebooks')
    op.drop_index('idx_audio_overviews_notebook_id', table_name='audio_overviews')
    op.drop_table('audio_overviews')
    op.drop_index('idx_video_overviews_notebook_id', table_name='video_overviews')
    op.drop_table('video_overviews')
    op.drop_index('idx_opportunity_reminders_due_date', table_name='opportunity_reminders')
    op.drop_index('idx_opportunity_reminders_opportunity_id', table_name='opportunity_reminders')
    op.drop_table('opportunity_reminders')
    op.drop_index('idx_conversations_created_at', table_name='conversations')
    op.drop_index('idx_conversations_notebook_id', table_name='conversations')
    op.drop_table('conversations')
    op.drop_index('idx_opportunity_scores_opportunity_id', table_name='opportunity_scores')
    op.drop_table('opportunity_scores')
    op.drop_index('idx_sources_created_at', table_name='sources')
    op.drop_index('idx_sources_notebook_id', table_name='sources')
    op.drop_index('idx_sources_status', table_name='sources')
    op.drop_table('sources')
    op.drop_index('idx_opportunity_feedback_opportunity_id', table_name='opportunity_feedback')
    op.drop_table('opportunity_feedback')
    op.drop_index('idx_presentations_pinned', table_name='presentations')
    op.drop_table('presentations')
    op.drop_index('idx_api_keys_key_hash', table_name='api_keys')
    op.drop_index('idx_api_keys_user_id', table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_index('idx_opportunities_archived', table_name='opportunities')
    op.drop_index('idx_opportunities_stage', table_name='opportunities')
    op.drop_index('idx_opportunities_user_id', table_name='opportunities')
    op.drop_table('opportunities')
    op.drop_index('waitlist_created_idx', table_name='waitlist')
    op.drop_index('waitlist_email_idx', table_name='waitlist')
    op.drop_table('waitlist')
    op.drop_table('profiles')
    op.drop_index('idx_feedback_invites_opportunity_id', table_name='feedback_invites')
    op.drop_index('idx_feedback_invites_token', table_name='feedback_invites')
    op.drop_table('feedback_invites')
    op.drop_table('prd_versions')
    op.drop_table('prds')
    op.drop_index('idx_projects_ranking', table_name='projects')
    op.drop_table('projects')
    op.add_column('users', sa.Column('hashed_password', sa.String(), nullable=False))
    op.add_column('users', sa.Column('name', sa.String(), nullable=False))
    op.add_column('users', sa.Column('date_of_birth', sa.Date(), nullable=True))
    op.add_column('users', sa.Column('cancer_type', sa.String(), nullable=True))
    op.add_column('users', sa.Column('diagnosis_date', sa.Date(), nullable=True))
    op.add_column('users', sa.Column('current_treatment', sa.Text(), nullable=True))
    op.add_column('users', sa.Column('oncologist', sa.String(), nullable=True))
    op.add_column('users', sa.Column('height_inches', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('current_weight_lbs', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('target_weight_lbs', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('workout_time_available', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('equipment_available', sa.JSON(), nullable=True))
    op.add_column('users', sa.Column('athletic_background', sa.Text(), nullable=True))
    op.add_column('users', sa.Column('protein_minimization_mode', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('coaching_personality', sa.String(), nullable=True))
    op.add_column('users', sa.Column('reminder_preferences', sa.JSON(), nullable=True))
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.drop_constraint('users_id_fkey', 'users', type_='foreignkey')
    op.drop_column('users', 'full_name')
    op.drop_column('users', 'avatar_url')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('avatar_url', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('full_name', sa.TEXT(), autoincrement=False, nullable=True))
    op.create_foreign_key('users_id_fkey', 'users', 'users', ['id'], ['id'], referent_schema='auth', ondelete='CASCADE')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'reminder_preferences')
    op.drop_column('users', 'coaching_personality')
    op.drop_column('users', 'protein_minimization_mode')
    op.drop_column('users', 'athletic_background')
    op.drop_column('users', 'equipment_available')
    op.drop_column('users', 'workout_time_available')
    op.drop_column('users', 'target_weight_lbs')
    op.drop_column('users', 'current_weight_lbs')
    op.drop_column('users', 'height_inches')
    op.drop_column('users', 'oncologist')
    op.drop_column('users', 'current_treatment')
    op.drop_column('users', 'diagnosis_date')
    op.drop_column('users', 'cancer_type')
    op.drop_column('users', 'date_of_birth')
    op.drop_column('users', 'name')
    op.drop_column('users', 'hashed_password')
    op.create_table('projects',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('completion', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('cycle_time', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('assignee', sa.TEXT(), server_default=sa.text("'You'::text"), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("'{}'::text[]"), autoincrement=False, nullable=True),
    sa.Column('github_prs', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('notion_tasks', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('github_repo_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('github_owner', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('github_repo_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('github_last_sync', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('ranking', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.CheckConstraint("priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])", name='projects_priority_check'),
    sa.CheckConstraint("status = ANY (ARRAY['planning'::text, 'in-progress'::text, 'completed'::text, 'at-risk'::text])", name='projects_status_check'),
    sa.CheckConstraint('completion >= 0 AND completion <= 100', name='projects_completion_check'),
    sa.PrimaryKeyConstraint('id', name='projects_pkey')
    )
    op.create_index('idx_projects_ranking', 'projects', ['ranking'], unique=False)
    op.create_table('prds',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('goals', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('personas', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('constraints', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('integrations', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tone', sa.TEXT(), server_default=sa.text("'professional'::text"), autoincrement=False, nullable=True),
    sa.Column('prd_markdown', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('model', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('tokens_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='prds_pkey'),
    sa.UniqueConstraint('project_id', name='prds_project_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('prd_versions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('prd_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('prd_markdown', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('model', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('tokens_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['prd_id'], ['prds.id'], name='prd_versions_prd_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='prd_versions_pkey')
    )
    op.create_table('feedback_invites',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('opportunity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('contact_email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('invite_token', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('used', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['opportunity_id'], ['opportunities.id'], name='feedback_invites_opportunity_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='feedback_invites_pkey'),
    sa.UniqueConstraint('invite_token', name='feedback_invites_invite_token_key')
    )
    op.create_index('idx_feedback_invites_token', 'feedback_invites', ['invite_token'], unique=False)
    op.create_index('idx_feedback_invites_opportunity_id', 'feedback_invites', ['opportunity_id'], unique=False)
    op.create_table('profiles',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('openai_api_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gamma_api_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('subscription_tier', sa.TEXT(), server_default=sa.text("'free'::text"), autoincrement=False, nullable=True),
    sa.Column('subscription_expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('display_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('learning_level', sa.TEXT(), server_default=sa.text("'beginner'::text"), autoincrement=False, nullable=True),
    sa.Column('daily_goal_minutes', sa.INTEGER(), server_default=sa.text('60'), autoincrement=False, nullable=True),
    sa.Column('current_streak', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_study_time', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('preferred_study_time', sa.TEXT(), server_default=sa.text("'evening'::text"), autoincrement=False, nullable=True),
    sa.Column('native_language', sa.TEXT(), server_default=sa.text("'english'::text"), autoincrement=False, nullable=True),
    sa.Column('avatar_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("subscription_tier = ANY (ARRAY['free'::text, 'premium'::text])", name='profiles_subscription_tier_check'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='profiles_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='profiles_pkey'),
    sa.UniqueConstraint('user_id', name='profiles_user_id_key')
    )
    op.create_table('waitlist',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='waitlist_pkey'),
    sa.UniqueConstraint('email', name='waitlist_email_key')
    )
    op.create_index('waitlist_email_idx', 'waitlist', ['email'], unique=False)
    op.create_index('waitlist_created_idx', 'waitlist', [sa.text('created_at DESC')], unique=False)
    op.create_table('opportunities',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('location', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('salary_range', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stage', postgresql.ENUM('interested', 'applied', 'interview', 'offer', 'rejected', name='job_stage'), server_default=sa.text("'interested'::job_stage"), autoincrement=False, nullable=False),
    sa.Column('archived', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('linkedin_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('job_description_file', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='opportunities_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='opportunities_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_opportunities_user_id', 'opportunities', ['user_id'], unique=False)
    op.create_index('idx_opportunities_stage', 'opportunities', ['stage'], unique=False)
    op.create_index('idx_opportunities_archived', 'opportunities', ['archived'], unique=False)
    op.create_table('api_keys',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('key_hash', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('last_used', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='api_keys_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='api_keys_pkey'),
    sa.UniqueConstraint('key_hash', name='api_keys_key_hash_key')
    )
    op.create_index('idx_api_keys_user_id', 'api_keys', ['user_id'], unique=False)
    op.create_index('idx_api_keys_key_hash', 'api_keys', ['key_hash'], unique=False)
    op.create_table('presentations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('source_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('gamma_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('generation_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=False),
    sa.Column('slide_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('topic', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pinned', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='presentations_pkey')
    )
    op.create_index('idx_presentations_pinned', 'presentations', ['user_id', 'pinned'], unique=False)
    op.create_table('opportunity_feedback',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('opportunity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('contact_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('contact_email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('vote', postgresql.ENUM('positive', 'negative', 'neutral', name='feedback_vote'), autoincrement=False, nullable=False),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['opportunity_id'], ['opportunities.id'], name='opportunity_feedback_opportunity_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='opportunity_feedback_pkey')
    )
    op.create_index('idx_opportunity_feedback_opportunity_id', 'opportunity_feedback', ['opportunity_id'], unique=False)
    op.create_table('sources',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('notebook_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('file_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('chunk_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text])", name='sources_status_check'),
    sa.CheckConstraint("type = ANY (ARRAY['pdf'::text, 'web'::text, 'youtube'::text, 'audio'::text, 'text'::text, 'docx'::text, 'pptx'::text])", name='sources_type_check'),
    sa.ForeignKeyConstraint(['notebook_id'], ['notebooks.id'], name='sources_notebook_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sources_pkey')
    )
    op.create_index('idx_sources_status', 'sources', ['status'], unique=False)
    op.create_index('idx_sources_notebook_id', 'sources', ['notebook_id'], unique=False)
    op.create_index('idx_sources_created_at', 'sources', [sa.text('created_at DESC')], unique=False)
    op.create_table('opportunity_scores',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('opportunity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('criterion', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('score', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('weight', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('max_score', sa.INTEGER(), server_default=sa.text('10'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['opportunity_id'], ['opportunities.id'], name='opportunity_scores_opportunity_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='opportunity_scores_pkey'),
    sa.UniqueConstraint('opportunity_id', 'criterion', name='opportunity_scores_opportunity_id_criterion_key')
    )
    op.create_index('idx_opportunity_scores_opportunity_id', 'opportunity_scores', ['opportunity_id'], unique=False)
    op.create_table('conversations',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('notebook_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('messages', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['notebook_id'], ['notebooks.id'], name='conversations_notebook_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='conversations_pkey')
    )
    op.create_index('idx_conversations_notebook_id', 'conversations', ['notebook_id'], unique=False)
    op.create_index('idx_conversations_created_at', 'conversations', [sa.text('created_at DESC')], unique=False)
    op.create_table('opportunity_reminders',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('opportunity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('completed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['opportunity_id'], ['opportunities.id'], name='opportunity_reminders_opportunity_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='opportunity_reminders_pkey')
    )
    op.create_index('idx_opportunity_reminders_opportunity_id', 'opportunity_reminders', ['opportunity_id'], unique=False)
    op.create_index('idx_opportunity_reminders_due_date', 'opportunity_reminders', ['due_date'], unique=False)
    op.create_table('video_overviews',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('notebook_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=False),
    sa.Column('video_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('thumbnail_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text])", name='video_overviews_status_check'),
    sa.ForeignKeyConstraint(['notebook_id'], ['notebooks.id'], name='video_overviews_notebook_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='video_overviews_pkey')
    )
    op.create_index('idx_video_overviews_notebook_id', 'video_overviews', ['notebook_id'], unique=False)
    op.create_table('audio_overviews',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('notebook_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=False),
    sa.Column('audio_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('script', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text])", name='audio_overviews_status_check'),
    sa.ForeignKeyConstraint(['notebook_id'], ['notebooks.id'], name='audio_overviews_notebook_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='audio_overviews_pkey')
    )
    op.create_index('idx_audio_overviews_notebook_id', 'audio_overviews', ['notebook_id'], unique=False)
    op.create_table('notebooks',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='notebooks_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='notebooks_pkey')
    )
    op.create_index('idx_notebooks_user_id', 'notebooks', ['user_id'], unique=False)
    op.create_index('idx_notebooks_created_at', 'notebooks', [sa.text('created_at DESC')], unique=False)
    op.drop_index(op.f('ix_soreness_records_muscle_group'), table_name='soreness_records')
    op.drop_index(op.f('ix_soreness_records_id'), table_name='soreness_records')
    op.drop_index(op.f('ix_soreness_records_date'), table_name='soreness_records')
    op.drop_table('soreness_records')
    op.drop_index(op.f('ix_workout_logs_id'), table_name='workout_logs')
    op.drop_index(op.f('ix_workout_logs_date'), table_name='workout_logs')
    op.drop_table('workout_logs')
    op.drop_index(op.f('ix_workout_plans_id'), table_name='workout_plans')
    op.drop_index(op.f('ix_workout_plans_date'), table_name='workout_plans')
    op.drop_table('workout_plans')
    op.drop_index(op.f('ix_weight_records_id'), table_name='weight_records')
    op.drop_index(op.f('ix_weight_records_date'), table_name='weight_records')
    op.drop_table('weight_records')
    op.drop_index(op.f('ix_daily_protocols_id'), table_name='daily_protocols')
    op.drop_index(op.f('ix_daily_protocols_date'), table_name='daily_protocols')
    op.drop_table('daily_protocols')
    op.drop_index(op.f('ix_compliance_records_id'), table_name='compliance_records')
    op.drop_index(op.f('ix_compliance_records_date'), table_name='compliance_records')
    op.drop_table('compliance_records')
    op.drop_index(op.f('ix_research_studies_pubmed_id'), table_name='research_studies')
    op.drop_index(op.f('ix_research_studies_id'), table_name='research_studies')
    op.drop_table('research_studies')
    op.drop_index(op.f('ix_muscle_groups_id'), table_name='muscle_groups')
    op.drop_table('muscle_groups')
    op.drop_index(op.f('ix_foods_id'), table_name='foods')
    op.drop_table('foods')
    op.drop_index(op.f('ix_exercises_id'), table_name='exercises')
    op.drop_table('exercises')
    # ### end Alembic commands ###

